<?php

namespace AwardsMartBackend\ProductsBundle\Repository;
use AwardsMartBackend\ProductsBundle\Entity\Category;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * This is the constant we can use whenever referring to PRODUCTS
     */
    const PRODUCTS_TYPE = 1;

    /**
     * This is the constant we can use whenever referring to THEMES
     */
    const THEMES_TYPE = 2;

    /**
     * @param $category_id
     * @return array
     *
     * This method will find all the category children for a given category ID.
     * Dirty, but my God it works.
     */
    public function loadCategoryChildrenFlattened($category_id)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $query = $qb
            ->select("c")
            ->from("ProductsBundle:Category","c")
            ->where("c.parent = :id")
            ->andWhere("c.isActive = 1")
            ->setParameter("id",$category_id)
            ->orderBy("c.name","ASC")
            ->getQuery();

        // return $query->getArrayResult();
        return $query->getResult();
    }

    /**
     * @param $category_id
     * @return array
     *
     * This method will find all the Prodcuts for a given Category, (not filtered)
     * and return them as a flattened array. In the future, we may want to create
     * something on the Product repository as well.
     */
    public function loadCategoryProductsFlattened($category_id)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $query = $qb
            ->select("p, i")
            ->from("ProductsBundle:Product","p")
            ->leftJoin("p.categories", "c")
            ->leftJoin("p.productImages","i")
            ->innerJoin("p.productSizes","ps")
            ->where("c.id = :id")
            ->andWhere("p.isActive = 1")
            ->setParameter("id", $category_id)
            ->orderBy('p.orderIndexNum', "ASC")
            ->addOrderBy("p.sku","DESC")
            ->getQuery();

        // return $query->getArrayResult();
        return $query->getResult();
    }

    /**
     * @param $type_id
     * @return array
     *
     * Simple, flat response for a query. We won't need the tree until the back-end.
     * And, even then.. maybe.
     */
    public function buildCategoryMenuForType($type_id, $array = true)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $query =
            $qb->select("c")
                ->from("ProductsBundle:Category","c")
                ->where($qb->expr()->andX(
                    $qb->expr()->eq("c.isActive",1),
                    $qb->expr()->eq("c.type",intval($type_id)),
                    $qb->expr()->orX(
                        $qb->expr()->eq("c.parent",0),
                        $qb->expr()->isNull("c.parent")
                    )
                ))
                ->orderBy("c.name","ASC")
                ->getQuery();

        return ($array) ? $query->getArrayResult() : $query->getResult();
    }

    /**
     * @param int $category_id
     * @return array
     * 
     * This will go down 3 levels, and find any related category_ids for the given
     * category_id (including the one given)
     */
    public function getRelatedCategoryIdsFor($category_id = 0)
    {
        $category_id = intval($category_id);
        if( $category_id && $category_id != 0){
            $categories = [$category_id];
            /** @var Category $Category_One */
            $Category_One = $this->find($category_id);
            if( count($Category_One->getChildrenCategories()) > 0){
                foreach($Category_One->getChildrenCategories() as $Category_One_Child){
                    $categories[] = $Category_One_Child->getId();
                    if( count($Category_One_Child->getChildrenCategories()) > 0){
                        foreach( $Category_One_Child->getChildrenCategories() as $Category_Two_Child){
                            $categories[] = $Category_Two_Child->getId();
                        }
                    }
                }
            }
            return $categories;
        }else{
            return [];    
        }
    }

    /**
     * @return array
     */
    public function getSelectReadyCategories()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select("c")
            ->from("ProductsBundle:Category","c")
            ->where("c.isActive = 1");
            /*->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->isNotNull("c.parent"),
                    $qb->expr()->neq("c.parent", 0)
                )
            );*/
        $qb->addOrderBy("c.parent","ASC");
        return $qb->getQuery()->getResult();
    }
}
