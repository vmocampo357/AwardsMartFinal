<?php

namespace AwardsMartBackend\ProductsBundle\Repository;
use AwardsMartBackend\ProductsBundle\Data\OrderSearchCriteria;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * CustomerOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerOrderRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param OrderSearchCriteria $c
     * @return \Doctrine\ORM\QueryBuilder
     *
     */
    public function buildSeachQueryBuilder(OrderSearchCriteria $c)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select("o,c")
            ->from("ProductsBundle:CustomerOrder","o")
            ->join("o.customer","c");

        // Criteria: Text LIKE (name, email, PO Number)
        if( $c->getText() ){
            $qb->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->like("o.purchaseOrderNumber",":text"),
                    $qb->expr()->like("c.name",":text"),
                    $qb->expr()->like("c.email",":text")
                )
            );
            $qb->setParameter("text","%" . $c->getText() ."%");
        }

        // Criteria: Final total is either gte, or lte
        if( $c->getTotal() && $c->isGte() ){
            $qb->andWhere(
                $qb->expr()->gte("o.finalTotal",":total")
            );
            $qb->setParameter("total",$c->getTotal());
        }

        // Criteria: Final total is either gte, or lte
        if( $c->getTotal() && $c->isLte() ){
            $qb->andWhere(
                $qb->expr()->lte("o.finalTotal",":total")
            );
            $qb->setParameter("total",$c->getTotal());
        }

        $qb->orderBy("o.id","DESC");

        return $qb;
    }

    /**
     * @param OrderSearchCriteria $c
     * @param int $page
     * @param int $limit
     * @return Paginator
     */
    public function findCriteriaOrdersPaged(OrderSearchCriteria $c, $page = 1, $limit = 10)
    {
        $query = $this->buildSeachQueryBuilder($c);
        return $this->paginate($query->getQuery(), $page, $limit);
    }

    /**
     * @param $dql
     * @param int $page
     * @param int $limit
     * @return Paginator
     *
     */
    public function paginate($dql, $page = 1, $limit = 1)
    {
        $paginator = new Paginator($dql);

        $paginator->getQuery()
            ->setFirstResult($limit * ($page - 1)) // Offset
            ->setMaxResults($limit); // Limit

        return $paginator;
    }
}
