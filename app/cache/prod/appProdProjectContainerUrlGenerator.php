<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Psr\Log\LoggerInterface;

/**
 * appProdProjectContainerUrlGenerator
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appProdProjectContainerUrlGenerator extends Symfony\Component\Routing\Generator\UrlGenerator
{
    private static $declaredRoutes;

    /**
     * Constructor.
     */
    public function __construct(RequestContext $context, LoggerInterface $logger = null)
    {
        $this->context = $context;
        $this->logger = $logger;
        if (null === self::$declaredRoutes) {
            self::$declaredRoutes = array(
        'api_search_products' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\ApiController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/search-products',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'my_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'cart_view' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\DefaultController::cartViewAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/my-cart',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'cart_item_update' => array (  0 =>   array (    0 => 'cart_item_id',  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\DefaultController::updateCartItemAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'cart_item_id',    ),    1 =>     array (      0 => 'text',      1 => '/update-cart-item',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'cart_item_delete' => array (  0 =>   array (    0 => 'cart_item_id',  ),  1 =>   array (    'cart_item_id' => 0,    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\DefaultController::removeCartItemAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'cart_item_id',    ),    1 =>     array (      0 => 'text',      1 => '/remove-cart-item',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'cart_checkout' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\DefaultController::checkoutAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/checkout/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'cart_checkout_post' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\DefaultController::checkoutPostAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/checkout/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'main_search_container' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\DefaultController::searchPageContainer',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'delete_upload' => array (  0 =>   array (    0 => 'cart_item_id',    1 => 'upload_id',  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\DefaultController::removeUploadAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'upload_id',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'cart_item_id',    ),    2 =>     array (      0 => 'text',      1 => '/delete-upload',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'about_us_cms' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\HtmlPagesController::aboutUsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/about-us',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'artwork_cms' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\HtmlPagesController::artworkAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/artwork',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'textwriting_cms' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\HtmlPagesController::textWritingAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/text-writing',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'mfgprocess_cms' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\HtmlPagesController::mfgProcessAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/mfg-process',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'whitepapers_cms' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\HtmlPagesController::whitePapersAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/white-papers',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'contact_cms' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\HtmlPagesController::contactUsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/contact-us',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'shipping_cms' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\HtmlPagesController::shippingAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/shipping',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'warranty_cms' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\HtmlPagesController::warrantyAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/warranty',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'privacypolicy_cms' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\HtmlPagesController::privacyPolicyAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/privacy-policy',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'invalid_categories' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\ProductsController::invalidCategoryViewAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/products/categories/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'products_category_view' => array (  0 =>   array (    0 => 'category_id',  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\ProductsController::CategoryViewAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'category_id',    ),    1 =>     array (      0 => 'text',      1 => '/products/categories',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'single_product' => array (  0 =>   array (    0 => 'category_id',    1 => 'product_id',  ),  1 =>   array (    'category_id' => 0,    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\ProductsController::ProductViewAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'product_id',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'category_id',    ),    2 =>     array (      0 => 'text',      1 => '/products/single',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'awardsmartfrontend_primarysite_products_productview' => array (  0 =>   array (    0 => 'product_id',  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\ProductsController::ProductViewAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'product_id',    ),    1 =>     array (      0 => 'text',      1 => '/products/single',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'empty_cart' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\ProductsController::emptyCartAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/products/destroy-cart',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'add_to_cart' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartFrontend\\PrimarySiteBundle\\Controller\\ProductsController::addCartAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/products/add-to-cart',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'awardsmartbackend_frontprovider_default_buildcategorymenufortype' => array (  0 =>   array (    0 => 'type',  ),  1 =>   array (    'type' => 1,    '_controller' => 'AwardsMartBackend\\FrontProviderBundle\\Controller\\DefaultController::buildCategoryMenuForTypeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'type',    ),    1 =>     array (      0 => 'text',      1 => '/data-provider/category-menu-builder',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'awardsmartbackend_frontprovider_default_testcategorymenu' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\FrontProviderBundle\\Controller\\DefaultController::testCategoryMenuAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/data-provider/category-menu-builder/test/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'awardsmartbackend_frontprovider_default_getcartcount' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\FrontProviderBundle\\Controller\\DefaultController::getCartCountAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/data-provider/get-cart-count',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'main_administrator_login' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\DefaultController::loginPageAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/administrator/login',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'awardsmartbackend_admininterface_default_index' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/administrator/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'main_administrator_container' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/administrator/dashboard',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'products_all_view' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\DefaultController::showAllProductsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/administrator/products/all',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'products_paged_view' => array (  0 =>   array (    0 => 'page',  ),  1 =>   array (    'page' => 1,    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\DefaultController::showAllProductsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'page',    ),    1 =>     array (      0 => 'text',      1 => '/administrator/products/all/page',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addons.all.view' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\DefaultController::showAllAddonsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/administrator/addons/all',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addons.paged.view' => array (  0 =>   array (    0 => 'page',  ),  1 =>   array (    'page' => 1,    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\DefaultController::showAllAddonsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'page',    ),    1 =>     array (      0 => 'text',      1 => '/administrator/addons/page',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'orders.single.view' => array (  0 =>   array (    0 => 'order_id',  ),  1 =>   array (    'order_id' => 0,    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\DefaultController::viewSingleOrder',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'order_id',    ),    1 =>     array (      0 => 'text',      1 => '/administrator/orders/view',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'categories.all.view' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\DefaultController::showAllCategories',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/administrator/categories/all',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'orders.all.view' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\DefaultController::showAllOrders',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/administrator/orders/all',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'orders.paged.view' => array (  0 =>   array (    0 => 'page',  ),  1 =>   array (    'page' => 1,    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\DefaultController::showAllOrders',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'page',    ),    1 =>     array (      0 => 'text',      1 => '/administrator/orders/page',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'cms.pages.all' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\DefaultController::showAllPages',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/administrator/cms-pages/all',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'images.all' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\DefaultController::showAllImages',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/administrator/library-images/all',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin.login' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SecurityController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/login',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin.logout' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SecurityController::logoutAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/logout',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'update.create.addon' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SingleUpdateRoutesController::createAddonAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/administrator/update/new/addon',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'update.existing.addon' => array (  0 =>   array (    0 => 'addon_id',  ),  1 =>   array (    'addon_id' => 0,    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SingleUpdateRoutesController::updateAddonAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'addon_id',    ),    1 =>     array (      0 => 'text',      1 => '/administrator/update/existing/addon',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deactivate.existing.addon' => array (  0 =>   array (    0 => 'addon_id',  ),  1 =>   array (    'addon_id' => 0,    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SingleUpdateRoutesController::deactivateAddonAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'addon_id',    ),    1 =>     array (      0 => 'text',      1 => '/administrator/update/deactivate/addon',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deactivate.existing.addon_option' => array (  0 =>   array (    0 => 'addon_option_id',  ),  1 =>   array (    'addon_option_id' => 0,    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SingleUpdateRoutesController::deactivateAddonOption',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'addon_option_id',    ),    1 =>     array (      0 => 'text',      1 => '/administrator/update/deactivate/addon-option',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'update.create.category.parent' => array (  0 =>   array (    0 => 'class_id',    1 => 'parent_id',  ),  1 =>   array (    'parent_id' => 0,    'class_id' => 1,    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SingleUpdateRoutesController::addNewCategory',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'parent_id',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'class_id',    ),    2 =>     array (      0 => 'text',      1 => '/administrator/update/new/category',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'update.create.category' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SingleUpdateRoutesController::addNewCategory',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/administrator/update/new/category/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'update.existing.category' => array (  0 =>   array (    0 => 'category_id',  ),  1 =>   array (    'category_id' => 0,    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SingleUpdateRoutesController::updateCategory',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'category_id',    ),    1 =>     array (      0 => 'text',      1 => '/administrator/update/existing/category',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deactivate.existing.category' => array (  0 =>   array (    0 => 'category_id',  ),  1 =>   array (    'category_id' => 0,    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SingleUpdateRoutesController::deactivateCategoryAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'category_id',    ),    1 =>     array (      0 => 'text',      1 => '/administrator/update/deactivate/category',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'update.create.product' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SingleUpdateRoutesController::addNewProduct',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/administrator/update/new/product/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'update.existing.product' => array (  0 =>   array (    0 => 'product_id',  ),  1 =>   array (    'product_id' => 0,    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SingleUpdateRoutesController::updateExistingProduct',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'product_id',    ),    1 =>     array (      0 => 'text',      1 => '/administrator/update/existing/product',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deactivate.existing.product' => array (  0 =>   array (    0 => 'product_id',  ),  1 =>   array (    'product_id' => 0,    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SingleUpdateRoutesController::deactivateProductAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'product_id',    ),    1 =>     array (      0 => 'text',      1 => '/administrator/update/deactivate/product',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'update.existing.page' => array (  0 =>   array (    0 => 'page_id',  ),  1 =>   array (    'page_id' => 0,    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SingleUpdateRoutesController::updateExistingPage',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'page_id',    ),    1 =>     array (      0 => 'text',      1 => '/administrator/update/existing/cms-page',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'create.new.image' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SingleUpdateRoutesController::addLibraryImage',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/administrator/update/new/library-image',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deactivate.existing.image' => array (  0 =>   array (    0 => 'image_id',  ),  1 =>   array (    '_controller' => 'AwardsMartBackend\\AdminInterfaceBundle\\Controller\\SingleUpdateRoutesController::removeLibraryImage',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'image_id',    ),    1 =>     array (      0 => 'text',      1 => '/administrator/update/deactivate/library-image',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
    );
        }
    }

    public function generate($name, $parameters = array(), $referenceType = self::ABSOLUTE_PATH)
    {
        if (!isset(self::$declaredRoutes[$name])) {
            throw new RouteNotFoundException(sprintf('Unable to generate a URL for the named route "%s" as such route does not exist.', $name));
        }

        list($variables, $defaults, $requirements, $tokens, $hostTokens, $requiredSchemes) = self::$declaredRoutes[$name];

        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $referenceType, $hostTokens, $requiredSchemes);
    }
}
