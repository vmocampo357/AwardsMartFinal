<?php

namespace Proxies\__CG__\AwardsMartBackend\ProductsBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Category extends \AwardsMartBackend\ProductsBundle\Entity\Category implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'id', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'name', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'type', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'metaTitle', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'metaDescription', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'displayOrder', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'isActive', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'products', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'categoryImages', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'children', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'parent', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'options'];
        }

        return ['__isInitialized__', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'id', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'name', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'type', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'metaTitle', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'metaDescription', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'displayOrder', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'isActive', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'products', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'categoryImages', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'children', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'parent', '' . "\0" . 'AwardsMartBackend\\ProductsBundle\\Entity\\Category' . "\0" . 'options'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Category $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function addOption(\AwardsMartBackend\ProductsBundle\Entity\ProductOption $option)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addOption', [$option]);

        return parent::addOption($option);
    }

    /**
     * {@inheritDoc}
     */
    public function removeOption(\AwardsMartBackend\ProductsBundle\Entity\ProductOption $option)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeOption', [$option]);

        return parent::removeOption($option);
    }

    /**
     * {@inheritDoc}
     */
    public function getOptions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOptions', []);

        return parent::getOptions();
    }

    /**
     * {@inheritDoc}
     */
    public function addCategory(\AwardsMartBackend\ProductsBundle\Entity\Category $category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCategory', [$category]);

        return parent::addCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCategory(\AwardsMartBackend\ProductsBundle\Entity\Category $category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCategory', [$category]);

        return parent::removeCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getChildrenCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildrenCategories', []);

        return parent::getChildrenCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function addCategoryImage(\AwardsMartBackend\ProductsBundle\Entity\CategoryImage $image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCategoryImage', [$image]);

        return parent::addCategoryImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCategoryImage(\AwardsMartBackend\ProductsBundle\Entity\CategoryImage $image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCategoryImage', [$image]);

        return parent::removeCategoryImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getProductImages()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductImages', []);

        return parent::getProductImages();
    }

    /**
     * {@inheritDoc}
     */
    public function addProduct(\AwardsMartBackend\ProductsBundle\Entity\Product $product)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProduct', [$product]);

        return parent::addProduct($product);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProduct(\AwardsMartBackend\ProductsBundle\Entity\Product $product)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProduct', [$product]);

        return parent::removeProduct($product);
    }

    /**
     * {@inheritDoc}
     */
    public function getProducts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProducts', []);

        return parent::getProducts();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\AwardsMartBackend\ProductsBundle\Entity\Category $parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function removeParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeParent', []);

        return parent::removeParent();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaTitle($metaTitle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaTitle', [$metaTitle]);

        return parent::setMetaTitle($metaTitle);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaTitle', []);

        return parent::getMetaTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaDescription($metaDescription)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaDescription', [$metaDescription]);

        return parent::setMetaDescription($metaDescription);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaDescription', []);

        return parent::getMetaDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayOrder($displayOrder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayOrder', [$displayOrder]);

        return parent::setDisplayOrder($displayOrder);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayOrder', []);

        return parent::getDisplayOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsActive($isActive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsActive', [$isActive]);

        return parent::setIsActive($isActive);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsActive', []);

        return parent::getIsActive();
    }

    /**
     * {@inheritDoc}
     */
    public function getPrimaryImageObject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrimaryImageObject', []);

        return parent::getPrimaryImageObject();
    }

    /**
     * {@inheritDoc}
     */
    public function getPrimaryImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrimaryImage', []);

        return parent::getPrimaryImage();
    }

}
