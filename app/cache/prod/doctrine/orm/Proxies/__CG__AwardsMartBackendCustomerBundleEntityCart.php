<?php

namespace Proxies\__CG__\AwardsMartBackend\CustomerBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Cart extends \AwardsMartBackend\CustomerBundle\Entity\Cart implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'id', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'sessionId', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'dateCreated', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'total', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'customer', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'cartItems', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'fees', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'runningQuantity', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'readPath'];
        }

        return ['__isInitialized__', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'id', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'sessionId', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'dateCreated', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'total', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'customer', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'cartItems', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'fees', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'runningQuantity', '' . "\0" . 'AwardsMartBackend\\CustomerBundle\\Entity\\Cart' . "\0" . 'readPath'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Cart $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getRunningQuantity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRunningQuantity', []);

        return parent::getRunningQuantity();
    }

    /**
     * {@inheritDoc}
     */
    public function setRunningQuantity($runningQuantity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRunningQuantity', [$runningQuantity]);

        return parent::setRunningQuantity($runningQuantity);
    }

    /**
     * {@inheritDoc}
     */
    public function addCartItem(\AwardsMartBackend\CustomerBundle\Entity\CartItem $item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCartItem', [$item]);

        return parent::addCartItem($item);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCartItem(\AwardsMartBackend\CustomerBundle\Entity\CartItem $item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCartItem', [$item]);

        return parent::removeCartItem($item);
    }

    /**
     * {@inheritDoc}
     */
    public function getCartItems()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCartItems', []);

        return parent::getCartItems();
    }

    /**
     * {@inheritDoc}
     */
    public function hasCartItem(\AwardsMartBackend\CustomerBundle\Entity\CartItem $cartItem)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCartItem', [$cartItem]);

        return parent::hasCartItem($cartItem);
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomer', []);

        return parent::getCustomer();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomer(\AwardsMartBackend\CustomerBundle\Entity\Customer $customer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomer', [$customer]);

        return parent::setCustomer($customer);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCustomer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCustomer', []);

        return parent::removeCustomer();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setSessionId($sessionId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSessionId', [$sessionId]);

        return parent::setSessionId($sessionId);
    }

    /**
     * {@inheritDoc}
     */
    public function getSessionId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSessionId', []);

        return parent::getSessionId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCreated($dateCreated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCreated', [$dateCreated]);

        return parent::setDateCreated($dateCreated);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreated', []);

        return parent::getDateCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setTotal($total)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTotal', [$total]);

        return parent::setTotal($total);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotal', []);

        return parent::getTotal();
    }

    /**
     * {@inheritDoc}
     */
    public function updateTotal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateTotal', []);

        return parent::updateTotal();
    }

    /**
     * {@inheritDoc}
     */
    public function getFees()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFees', []);

        return parent::getFees();
    }

    /**
     * {@inheritDoc}
     */
    public function setFees($fees)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFees', [$fees]);

        return parent::setFees($fees);
    }

    /**
     * {@inheritDoc}
     */
    public function addFee(array $fee)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addFee', [$fee]);

        return parent::addFee($fee);
    }

}
